name: Deploy

on:
  push:
    branches:
      - main
      - prod

jobs:
  test-lint:
    uses: ./.github/workflows/test-and-lint.yml
    name: Test and Lint
    secrets:
      DOCKERHUB_USER: ${{ vars.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy-ubuntu:
    name: Deploy ubuntu-22.04
    runs-on: ubuntu-22.04
    if: ${{ github.server_url == 'https://github.com' }}
    needs: [test-lint]
    steps:
      - name: Deploy placeholder
        run: echo "Deploy placeholder"
      # - name: Checkout
      #   uses: actions/checkout@v4
      # - name: Set vars
      #   run: |
      #     if [[ $GITHUB_REF == 'refs/heads/prod' ]]; then
      #       echo "prod" > .workspace
      #     else
      #     echo "staging" > .workspace
      #     fi
      # - name: Push to ECR
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   run: |
      #     aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
      #     docker build --compress -t ${{ vars.ECR_REPO_APP }}:$GITHUB_SHA .
      #     docker push ${{ vars.ECR_REPO_APP }}:$GITHUB_SHA
      #     docker build --compress -t ${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA proxy/
      #     docker push ${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA

      # - name: Terraform Apply
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
      #     TF_VAR_django_secret_key: ${{ secrets.TF_VAR_DJANGO_SECRET_KEY }}
      #   run: |
      #     export TF_VAR_ecr_app_image="${{ vars.ECR_REPO_APP }}:$GITHUB_SHA"
      #     export TF_VAR_ecr_proxy_image="${{ vars.ECR_REPO_PROXY }}:$GITHUB_SHA"
      #     workspace=$(cat .workspace)
      #     cd infra/
      #     docker compose run --rm terraform -chdir=deploy/ init
      #     docker compose run --rm terraform -chdir=deploy/ workspace select -or-create $workspace
      #     docker compose run --rm terraform -chdir=deploy/ apply -auto-approve


  deploy-windows:
    name: Deploy Windows
    runs-on: [self-hosted, Windows]
    if: ${{ github.server_url != 'https://github.com' }}
    needs: [test-lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set vars
        # shell: pwsh
        run: |
          if ($env:GITHUB_REF -eq 'refs/heads/prod') {
            "prod" | Out-File -FilePath .workspace
          } else {
            "staging" | Out-File -FilePath .workspace
          }
      - name: Push to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # shell: pwsh
        # TODO: hardcoded region us-east-1
        run: |
          $loginpwd = aws ecr get-login-password --region us-east-1
          docker login --username AWS --password $loginpwd ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
          Write-Output "GITHUB_SHA: $env:GITHUB_SHA"
          $appRepoTag = "${{ vars.ECR_REPO_APP }}:$env:GITHUB_SHA"
          Write-Output "appRepoTag: $appRepoTag"
          docker build --compress -t $appRepoTag .
          docker push $appRepoTag
          $proxyRepoTag = "${{ vars.ECR_REPO_PROXY }}:$env:$GITHUB_SHA"
          Write-Output "proxyRepoTag: $proxyRepoTag"
          docker build --compress -t $proxyRepoTag proxy/
          docker push $proxyRepoTag
      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_django_secret_key: ${{ secrets.TF_VAR_DJANGO_SECRET_KEY }}
        # shell: pwsh
        run: |
          $TF_VAR_ecr_app_image = "${{ vars.ECR_REPO_APP }}:$env:GITHUB_SHA"
          Write-Output "TF_VAR_ecr_app_image: $TF_VAR_ecr_app_image"
          $TF_VAR_ecr_proxy_image = "${{ vars.ECR_REPO_PROXY }}:$env:GITHUB_SHA"
          Write-Output "TF_VAR_ecr_proxy_image: $TF_VAR_ecr_proxy_image"
          $workspace = Get-Content .workspace
          Write-Output "workspace: $workspace"
          cd infra/
          docker compose run --rm terraform -chdir=deploy/ init
          docker compose run --rm terraform -chdir=deploy/ workspace select -or-create $workspace
          docker compose run --rm terraform -chdir=deploy/ apply -auto-approve

  deploy-final-status:
    needs: [deploy-ubuntu, deploy-windows]
    runs-on: ${{ (github.server_url == 'https://github.com' && 'ubuntu-22.04') || 'self-hosted' }}
    if: always()
    steps:
      - name: Determine Deploy Workflow Status
        shell: pwsh
        run: |
          Write-Output "Evaluating job results..."
          # Initialize overall result as success
          $OVERALL_RESULT = "success"

          # Check if deploy-ubuntu job ran and its result
          if ("${{ needs.deploy-ubuntu.result }}" -eq "failure") {
            Write-Output "deploy-ubuntu failed."
            $OVERALL_RESULT = "failure"
          }

          # Check if deploy-windows job ran and its result
          if ("${{ needs.deploy-windows.result }}" -eq "failure") {
            Write-Output "deploy-windows failed."
            $OVERALL_RESULT = "failure"
          }

          Write-Output "Overall result: $OVERALL_RESULT"
          if ($OVERALL_RESULT -eq "success") {
            exit 0
          } else {
            exit 1
          }