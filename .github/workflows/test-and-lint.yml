name: Test and Lint
on:
  workflow_call:
    secrets:
      DOCKERHUB_USER:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:

  # Job A: Runs ONLY on regular GitHub (Ubuntu Runner)
  python-ubuntu:
    name: Python ubuntu-22.04
    runs-on: ubuntu-22.04
    if: ${{ github.server_url == 'https://github.com' }}  # Directly check server URL
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Python test and lint placeholder
        run: echo "Python test and lint placeholder"
      # - name: Test
      #   run: docker compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test"
      # - name: Lint
      #   run: docker compose run --rm app sh -c "flake8"

  terraform-ubuntu:
    name: Terraform ubuntu-22.04
    runs-on: ubuntu-22.04
    steps:
      - name: Terraform lint placeholder
        run: echo "Terraform lint placeholder"
      # - name: Checkout
      #   uses: actions/checkout@v4
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USER }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Terraform lint
      #   run: |
      #     cd infra/
      #     docker compose run --rm terraform -chdir=deploy/ init -backend=false
      #     docker compose run --rm terraform -chdir=setup/ init -backend=false
      #     docker compose run --rm terraform -chdir=setup/ validate
      #     docker compose run --rm terraform -chdir=setup/ fmt -check
      #     docker compose run --rm terraform -chdir=deploy/ validate
      #     docker compose run --rm terraform -chdir=deploy/ fmt -check

  # Job B: Runs ONLY on GitHub Enterprise (Self-Hosted Windows Runner)
  python-windows:
    name: Python Windows
    runs-on: [self-hosted, Windows]
    if: ${{ github.server_url != 'https://github.com' }}  # Directly check server URL
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Login to Docker Hub
        uses: ./.github/actions/docker-login
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Test
        run: docker compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test"
      - name: Lint
        run: docker compose run --rm app sh -c "flake8"

  terraform-windows:
    name: Terraform Windows
    runs-on: [self-hosted, Windows]
    if: ${{ github.server_url != 'https://github.com' }}  # Directly check server URL
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - name: Login to Docker Hub
        uses: ./.github/actions/docker-login
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Terraform lint
        run: |
          cd infra
          docker compose run --rm terraform -chdir=deploy init -backend=false
          docker compose run --rm terraform -chdir=setup init -backend=false
          docker compose run --rm terraform -chdir=setup validate
          docker compose run --rm terraform -chdir=setup fmt -check
          docker compose run --rm terraform -chdir=deploy validate
          docker compose run --rm terraform -chdir=deploy fmt -check

  # Final Status Check
  final-status:
    needs: [python-ubuntu, python-windows, terraform-ubuntu, terraform-windows]
    runs-on: ${{ (github.server_url == 'https://github.com' && 'ubuntu-22.04') || 'self-hosted' }}
    if: always()
    steps:
      - name: Check pwsh
        shell: pwsh
        run: pwsh --version  # Outputs: PowerShell 7.2.17
      - name: Determine Workflow Status
        shell: pwsh
        run: |
          $ubuntu = "${{ needs.test-ubuntu.result }}"
          $windows = "${{ needs.test-windows.result }}"
          
          if ($ubuntu -eq 'success' -or $windows -eq 'success') { exit 0 }
          else { exit 1 }